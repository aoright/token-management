version: '3.8'

services:
  # PostgreSQL 数据库
  postgres:
    image: postgres:15-alpine
    container_name: token-monitor-db-prod
    environment:
      POSTGRES_DB: ${DB_NAME:-token_monitor}
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - postgres_prod_data:/var/lib/postgresql/data
      - ./backup:/backup
    networks:
      - token-monitor-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: always

  # 后端服务
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: token-monitor-backend-prod
    environment:
      DATABASE_URL: postgresql://${DB_USER:-postgres}:${DB_PASSWORD}@postgres:5432/${DB_NAME:-token_monitor}?schema=public
      PORT: 3001
      NODE_ENV: production
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRES_IN: ${JWT_EXPIRES_IN:-7d}
      ENCRYPTION_KEY: ${ENCRYPTION_KEY}
      CORS_ORIGIN: ${FRONTEND_URL:-https://yourdomain.com}
    expose:
      - "3001"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - token-monitor-network
    restart: always
    volumes:
      - ./backend/logs:/app/logs
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

  # 前端服务
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        VITE_API_BASE_URL: ${API_URL:-https://api.yourdomain.com}
    container_name: token-monitor-frontend-prod
    expose:
      - "80"
    depends_on:
      - backend
    networks:
      - token-monitor-network
    restart: always
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  # Nginx 反向代理
  nginx:
    image: nginx:alpine
    container_name: token-monitor-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./nginx/logs:/var/log/nginx
    depends_on:
      - frontend
      - backend
    networks:
      - token-monitor-network
    restart: always

volumes:
  postgres_prod_data:

networks:
  token-monitor-network:
    driver: bridge